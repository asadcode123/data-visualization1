[{"D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\index.js":"1","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\reportWebVitals.js":"2","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\App.js":"3","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\containers\\home\\index.js":"4","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\containers\\home\\database.js":"5","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\containers\\participants\\index.js":"6","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\containers\\visualization\\index.js":"7"},{"size":517,"mtime":1607435911812,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1607435911813,"results":"10","hashOfConfig":"9"},{"size":216,"mtime":1607435911810,"results":"11","hashOfConfig":"9"},{"size":7580,"mtime":1607441908599,"results":"12","hashOfConfig":"9"},{"size":641,"mtime":1607435911811,"results":"13","hashOfConfig":"9"},{"size":5434,"mtime":1607441304807,"results":"14","hashOfConfig":"9"},{"size":1321,"mtime":1607438092551,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1n2132m",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\index.js",[],["35","36"],"D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\reportWebVitals.js",[],"D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\App.js",["37"],"import logo from \"./logo.svg\";\r\nimport Home from \"../src/containers/home\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\containers\\home\\index.js",["38","39","40","41","42","43","44","45","46","47"],"import React, { useState, useEffect } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport { events, status, participants } from \"./database\";\r\nimport Participants from \"../participants\";\r\nimport DataVisualization from \"../visualization\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst Home = (props) => {\r\n  const [state, setState] = React.useState({\r\n    checkedA: true,\r\n    checkedB: true,\r\n  });\r\n\r\n  const [eventsData, setEvents] = useState(() => {\r\n    return events;\r\n  });\r\n\r\n  const [participantsData, setParticipantsData] = useState(() => {\r\n    return participants;\r\n  });\r\n\r\n  const [singleEvent, setSingleEvent] = useState({\r\n    id: 0,\r\n    name: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    isAsync: true,\r\n  });\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const resetForm = () => {\r\n    setSingleEvent({\r\n      ...singleEvent,\r\n      id: 0,\r\n      name: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n      isAsync: true,\r\n    });\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    resetForm();\r\n    setOpen(false);\r\n  };\r\n\r\n  const openAddEventModal = () => {\r\n    handleClickOpen();\r\n  };\r\n\r\n  const AddEvent = () => {\r\n    singleEvent.id = Math.floor(Math.random() * 10000000000);\r\n    let eventsClone = [...eventsData];\r\n    eventsClone.push(singleEvent);\r\n    setEvents(eventsClone);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Events</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"event-name\"\r\n            label=\"Event Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            size=\"medium\"\r\n            value={singleEvent.name}\r\n            onChange={(e) => {\r\n              setSingleEvent({ ...singleEvent, name: e.target.value });\r\n            }}\r\n          />\r\n          <br />\r\n          <br />\r\n          <TextField\r\n            fullWidth\r\n            id=\"datetime-local\"\r\n            label=\"Start Date\"\r\n            type=\"datetime-local\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            value={singleEvent.startDate}\r\n            onChange={(e) => {\r\n              setSingleEvent({ ...singleEvent, startDate: e.target.value });\r\n            }}\r\n          />\r\n          <br />\r\n          <br />\r\n          <TextField\r\n            style={{\r\n              width: \"100%\",\r\n            }}\r\n            value={singleEvent.endDate}\r\n            id=\"datetime-local\"\r\n            label=\"End Date\"\r\n            type=\"datetime-local\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            onChange={(e) => {\r\n              setSingleEvent({ ...singleEvent, endDate: e.target.value });\r\n            }}\r\n          />\r\n          <br />\r\n          <br />\r\n          <label>Async or Moderate</label>\r\n          <Switch\r\n            onChange={(e) => {\r\n              setSingleEvent({ ...singleEvent, isAsync: !e.target.checked });\r\n            }}\r\n            value={singleEvent.isAsync}\r\n            color=\"primary\"\r\n            name=\"checkedB\"\r\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={resetForm} color=\"primary\">\r\n            Reset\r\n          </Button>\r\n          <Button onClick={AddEvent} color=\"primary\">\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Grid item xs={12}>\r\n          <Paper className=\"header_custom\" >Data Visualization</Paper>\r\n      </Grid>\r\n      <Grid\r\n        style={{\r\n          padding: \"16px\",\r\n        }}\r\n        container\r\n        spacing={3}\r\n        \r\n      >\r\n        <Grid item xs={3}>\r\n          <Grid justify=\"flex-end\" item xs={12} >\r\n            <Paper className=\"paper sidebar-height-1\">\r\n              <div style={{ padding: \"16px\" }}>\r\n                <Button\r\n                  onClick={openAddEventModal}\r\n                  style={{\r\n                    float: \"right\",\r\n                  }}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  +\r\n                </Button>\r\n                <h2 className=\"h2\">Event Info Section</h2>\r\n              </div>\r\n              <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                {eventsData.map((data, index) => {\r\n                  return (\r\n                    <ListItem button>\r\n                      <ListItemText primary={`${data.id} ${data.name}`} />\r\n                      <Button\r\n                        startIcon={<PlayArrowIcon />}\r\n                        style={{\r\n                          float: \"right\",\r\n                          marginLeft: \"2px\",\r\n                        }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                      ></Button>\r\n                      <Button\r\n                        startIcon={<PauseIcon />}\r\n                        style={{\r\n                          float: \"right\",\r\n                          marginLeft: \"2px\",\r\n                        }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                      ></Button>\r\n                      <Button\r\n                        startIcon={<StopIcon />}\r\n                        style={{\r\n                          float: \"right\",\r\n                          marginLeft: \"2px\",\r\n                        }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                      ></Button>\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n            </Paper>\r\n          </Grid>\r\n          <br />\r\n          <Participants />\r\n        </Grid>\r\n        <Grid item xs={9}>\r\n          <Paper className=\"paper min-height-visualization\">\r\n            <h2 className=\"visualization-h2 text-center\" >Main Data Visualization Section</h2>\r\n            <DataVisualization />\r\n          </Paper>\r\n          <br />\r\n          <Paper className=\"paper min-height-footer\">\r\n            <h2 className=\"visualization-h2 text-center\">Footer</h2>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\containers\\home\\database.js",[],"D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\containers\\participants\\index.js",["48","49","50","51","52","53","54"],"import React, { useState, useEffect } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport { events, status, participants } from \"../home/database\";\r\n\r\nimport \"../home/index.css\";\r\n\r\nconst Participants = (props) => {\r\n  const [participantsData, setParticipantsData] = useState(() => {\r\n    return participants;\r\n  });\r\n\r\n  const [singleParticipant, setSingleParticipant] = useState({\r\n    id: \"\",\r\n  });\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    resetForm();\r\n    setOpen(false);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setSingleParticipant({\r\n      id: \"\",\r\n    });\r\n  };\r\n\r\n  const openAddEventModal = () => {\r\n    handleClickOpen();\r\n  };\r\n\r\n  const AddParticipant = () => {\r\n    let participantClone = [...participantsData];\r\n    singleParticipant.status = status.CONNECTED;\r\n    singleParticipant.batteryLevel = 100;\r\n    participantClone.push(singleParticipant);\r\n    setParticipantsData(participantClone);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Participants</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"participantRef\"\r\n            label=\"Participant Id/Email\"\r\n            type=\"text\"\r\n            fullWidth\r\n            size=\"medium\"\r\n            value={singleParticipant.id}\r\n            onChange={(e) => {\r\n              setSingleParticipant({\r\n                ...singleParticipant,\r\n                id: e.target.value,\r\n              });\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={resetForm} color=\"primary\">\r\n            Reset\r\n          </Button>\r\n          <Button onClick={AddParticipant} color=\"primary\">\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Grid justify=\"flex-end\" item xs={12}>\r\n        <Paper className=\"paper sidebar-height-2\" >\r\n          <div style={{ padding: \"16px\" }}>\r\n            <Button\r\n              onClick={openAddEventModal}\r\n              style={{\r\n                float: \"right\",\r\n              }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              +\r\n            </Button>\r\n            <h2 className=\"h2\">Participant Section</h2>\r\n          </div>\r\n          <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n            {participantsData.map((data, index) => {\r\n              let statusColor = \"\";\r\n              let title = \"\";\r\n              if (data.status === status.CONNECTED) {\r\n                statusColor = \"primary\";\r\n                title = \"Online\";\r\n              } else if (data.status === status.NOTCONNECTED) {\r\n                statusColor = \"error\";\r\n                title = \"NOT CONNECTED\";\r\n              } else if (data.status === status.READY) {\r\n                statusColor = \"secondary\";\r\n                title = \"READY\";\r\n              }\r\n              return (\r\n                <ListItem button>\r\n                  {data.id ? (\r\n                    <ListItemText primary={`${data.id}`} />\r\n                  ) : (\r\n                    <ListItemText primary={`${data.email}`} />\r\n                  )}\r\n                  <Tooltip title={title}>\r\n                    <Badge\r\n                      style={{ marginRight: \"10px\" }}\r\n                      color={statusColor}\r\n                      variant=\"dot\"\r\n                    ></Badge>\r\n                  </Tooltip>\r\n                  <Tooltip title={`Batteru Level: ${data.batteryLevel}`} >\r\n                    <div className=\"progressbar-muz\">\r\n                    <CircularProgress\r\n                      variant=\"determinate\"\r\n                      value={data.batteryLevel}\r\n                    />\r\n                    <div className=\"progressbar-muz-percentage\">\r\n                      {data.batteryLevel}\r\n                    </div>\r\n                    </div>\r\n                  </Tooltip>\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n        </Paper>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Participants;\r\n","D:\\laragon\\www\\asad-abbas\\data-visualization1\\src\\containers\\visualization\\index.js",[],["55","56"],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":12},{"ruleId":"61","severity":1,"message":"65","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"66","line":15,"column":8,"nodeType":"63","messageId":"64","endLine":15,"endColumn":25},{"ruleId":"61","severity":1,"message":"67","line":18,"column":8,"nodeType":"63","messageId":"64","endLine":18,"endColumn":13},{"ruleId":"61","severity":1,"message":"68","line":19,"column":8,"nodeType":"63","messageId":"64","endLine":19,"endColumn":24},{"ruleId":"61","severity":1,"message":"69","line":20,"column":8,"nodeType":"63","messageId":"64","endLine":20,"endColumn":15},{"ruleId":"61","severity":1,"message":"70","line":22,"column":18,"nodeType":"63","messageId":"64","endLine":22,"endColumn":24},{"ruleId":"61","severity":1,"message":"71","line":29,"column":10,"nodeType":"63","messageId":"64","endLine":29,"endColumn":15},{"ruleId":"61","severity":1,"message":"72","line":29,"column":17,"nodeType":"63","messageId":"64","endLine":29,"endColumn":25},{"ruleId":"61","severity":1,"message":"73","line":38,"column":10,"nodeType":"63","messageId":"64","endLine":38,"endColumn":26},{"ruleId":"61","severity":1,"message":"74","line":38,"column":28,"nodeType":"63","messageId":"64","endLine":38,"endColumn":47},{"ruleId":"61","severity":1,"message":"65","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"75","line":8,"column":8,"nodeType":"63","messageId":"64","endLine":8,"endColumn":21},{"ruleId":"61","severity":1,"message":"76","line":9,"column":8,"nodeType":"63","messageId":"64","endLine":9,"endColumn":16},{"ruleId":"61","severity":1,"message":"77","line":10,"column":8,"nodeType":"63","messageId":"64","endLine":10,"endColumn":17},{"ruleId":"61","severity":1,"message":"66","line":15,"column":8,"nodeType":"63","messageId":"64","endLine":15,"endColumn":25},{"ruleId":"61","severity":1,"message":"78","line":17,"column":8,"nodeType":"63","messageId":"64","endLine":17,"endColumn":14},{"ruleId":"61","severity":1,"message":"79","line":22,"column":10,"nodeType":"63","messageId":"64","endLine":22,"endColumn":16},{"ruleId":"57","replacedBy":"80"},{"ruleId":"59","replacedBy":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'DialogContentText' is defined but never used.","'Badge' is defined but never used.","'CircularProgress' is defined but never used.","'Tooltip' is defined but never used.","'status' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'participantsData' is assigned a value but never used.","'setParticipantsData' is assigned a value but never used.","'PlayArrowIcon' is defined but never used.","'StopIcon' is defined but never used.","'PauseIcon' is defined but never used.","'Switch' is defined but never used.","'events' is defined but never used.",["82"],["83"],"no-global-assign","no-unsafe-negation"]